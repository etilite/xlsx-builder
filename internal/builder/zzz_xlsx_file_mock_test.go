// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package builder

//go:generate minimock -i github.com/etilite/xlsx-builder/internal/builder.xlsxFile -o zzz_xlsx_file_mock_test.go -n XlsxFileMock -p builder

import (
	"io"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/xuri/excelize/v2"
)

// XlsxFileMock implements xlsxFile
type XlsxFileMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mXlsxFileMockClose

	funcNewStreamWriter          func(sheet string) (sp1 *excelize.StreamWriter, err error)
	inspectFuncNewStreamWriter   func(sheet string)
	afterNewStreamWriterCounter  uint64
	beforeNewStreamWriterCounter uint64
	NewStreamWriterMock          mXlsxFileMockNewStreamWriter

	funcWrite          func(w io.Writer, opts ...excelize.Options) (err error)
	inspectFuncWrite   func(w io.Writer, opts ...excelize.Options)
	afterWriteCounter  uint64
	beforeWriteCounter uint64
	WriteMock          mXlsxFileMockWrite
}

// NewXlsxFileMock returns a mock for xlsxFile
func NewXlsxFileMock(t minimock.Tester) *XlsxFileMock {
	m := &XlsxFileMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mXlsxFileMockClose{mock: m}

	m.NewStreamWriterMock = mXlsxFileMockNewStreamWriter{mock: m}
	m.NewStreamWriterMock.callArgs = []*XlsxFileMockNewStreamWriterParams{}

	m.WriteMock = mXlsxFileMockWrite{mock: m}
	m.WriteMock.callArgs = []*XlsxFileMockWriteParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mXlsxFileMockClose struct {
	optional           bool
	mock               *XlsxFileMock
	defaultExpectation *XlsxFileMockCloseExpectation
	expectations       []*XlsxFileMockCloseExpectation

	expectedInvocations uint64
}

// XlsxFileMockCloseExpectation specifies expectation struct of the xlsxFile.Close
type XlsxFileMockCloseExpectation struct {
	mock *XlsxFileMock

	results *XlsxFileMockCloseResults
	Counter uint64
}

// XlsxFileMockCloseResults contains results of the xlsxFile.Close
type XlsxFileMockCloseResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmClose *mXlsxFileMockClose) Optional() *mXlsxFileMockClose {
	mmClose.optional = true
	return mmClose
}

// Expect sets up expected params for xlsxFile.Close
func (mmClose *mXlsxFileMockClose) Expect() *mXlsxFileMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("XlsxFileMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &XlsxFileMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the xlsxFile.Close
func (mmClose *mXlsxFileMockClose) Inspect(f func()) *mXlsxFileMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for XlsxFileMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by xlsxFile.Close
func (mmClose *mXlsxFileMockClose) Return(err error) *XlsxFileMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("XlsxFileMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &XlsxFileMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &XlsxFileMockCloseResults{err}
	return mmClose.mock
}

// Set uses given function f to mock the xlsxFile.Close method
func (mmClose *mXlsxFileMockClose) Set(f func() (err error)) *XlsxFileMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the xlsxFile.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the xlsxFile.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Times sets number of times xlsxFile.Close should be invoked
func (mmClose *mXlsxFileMockClose) Times(n uint64) *mXlsxFileMockClose {
	if n == 0 {
		mmClose.mock.t.Fatalf("Times of XlsxFileMock.Close mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmClose.expectedInvocations, n)
	return mmClose
}

func (mmClose *mXlsxFileMockClose) invocationsDone() bool {
	if len(mmClose.expectations) == 0 && mmClose.defaultExpectation == nil && mmClose.mock.funcClose == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmClose.mock.afterCloseCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmClose.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Close implements xlsxFile
func (mmClose *XlsxFileMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the XlsxFileMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to XlsxFileMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished XlsxFileMock.Close invocations
func (mmClose *XlsxFileMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of XlsxFileMock.Close invocations
func (mmClose *XlsxFileMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *XlsxFileMock) MinimockCloseDone() bool {
	if m.CloseMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseMock.invocationsDone()
}

// MinimockCloseInspect logs each unmet expectation
func (m *XlsxFileMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to XlsxFileMock.Close")
		}
	}

	afterCloseCounter := mm_atomic.LoadUint64(&m.afterCloseCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && afterCloseCounter < 1 {
		m.t.Error("Expected call to XlsxFileMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && afterCloseCounter < 1 {
		m.t.Error("Expected call to XlsxFileMock.Close")
	}

	if !m.CloseMock.invocationsDone() && afterCloseCounter > 0 {
		m.t.Errorf("Expected %d calls to XlsxFileMock.Close but found %d calls",
			mm_atomic.LoadUint64(&m.CloseMock.expectedInvocations), afterCloseCounter)
	}
}

type mXlsxFileMockNewStreamWriter struct {
	optional           bool
	mock               *XlsxFileMock
	defaultExpectation *XlsxFileMockNewStreamWriterExpectation
	expectations       []*XlsxFileMockNewStreamWriterExpectation

	callArgs []*XlsxFileMockNewStreamWriterParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// XlsxFileMockNewStreamWriterExpectation specifies expectation struct of the xlsxFile.NewStreamWriter
type XlsxFileMockNewStreamWriterExpectation struct {
	mock      *XlsxFileMock
	params    *XlsxFileMockNewStreamWriterParams
	paramPtrs *XlsxFileMockNewStreamWriterParamPtrs
	results   *XlsxFileMockNewStreamWriterResults
	Counter   uint64
}

// XlsxFileMockNewStreamWriterParams contains parameters of the xlsxFile.NewStreamWriter
type XlsxFileMockNewStreamWriterParams struct {
	sheet string
}

// XlsxFileMockNewStreamWriterParamPtrs contains pointers to parameters of the xlsxFile.NewStreamWriter
type XlsxFileMockNewStreamWriterParamPtrs struct {
	sheet *string
}

// XlsxFileMockNewStreamWriterResults contains results of the xlsxFile.NewStreamWriter
type XlsxFileMockNewStreamWriterResults struct {
	sp1 *excelize.StreamWriter
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Optional() *mXlsxFileMockNewStreamWriter {
	mmNewStreamWriter.optional = true
	return mmNewStreamWriter
}

// Expect sets up expected params for xlsxFile.NewStreamWriter
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Expect(sheet string) *mXlsxFileMockNewStreamWriter {
	if mmNewStreamWriter.mock.funcNewStreamWriter != nil {
		mmNewStreamWriter.mock.t.Fatalf("XlsxFileMock.NewStreamWriter mock is already set by Set")
	}

	if mmNewStreamWriter.defaultExpectation == nil {
		mmNewStreamWriter.defaultExpectation = &XlsxFileMockNewStreamWriterExpectation{}
	}

	if mmNewStreamWriter.defaultExpectation.paramPtrs != nil {
		mmNewStreamWriter.mock.t.Fatalf("XlsxFileMock.NewStreamWriter mock is already set by ExpectParams functions")
	}

	mmNewStreamWriter.defaultExpectation.params = &XlsxFileMockNewStreamWriterParams{sheet}
	for _, e := range mmNewStreamWriter.expectations {
		if minimock.Equal(e.params, mmNewStreamWriter.defaultExpectation.params) {
			mmNewStreamWriter.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNewStreamWriter.defaultExpectation.params)
		}
	}

	return mmNewStreamWriter
}

// ExpectSheetParam1 sets up expected param sheet for xlsxFile.NewStreamWriter
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) ExpectSheetParam1(sheet string) *mXlsxFileMockNewStreamWriter {
	if mmNewStreamWriter.mock.funcNewStreamWriter != nil {
		mmNewStreamWriter.mock.t.Fatalf("XlsxFileMock.NewStreamWriter mock is already set by Set")
	}

	if mmNewStreamWriter.defaultExpectation == nil {
		mmNewStreamWriter.defaultExpectation = &XlsxFileMockNewStreamWriterExpectation{}
	}

	if mmNewStreamWriter.defaultExpectation.params != nil {
		mmNewStreamWriter.mock.t.Fatalf("XlsxFileMock.NewStreamWriter mock is already set by Expect")
	}

	if mmNewStreamWriter.defaultExpectation.paramPtrs == nil {
		mmNewStreamWriter.defaultExpectation.paramPtrs = &XlsxFileMockNewStreamWriterParamPtrs{}
	}
	mmNewStreamWriter.defaultExpectation.paramPtrs.sheet = &sheet

	return mmNewStreamWriter
}

// Inspect accepts an inspector function that has same arguments as the xlsxFile.NewStreamWriter
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Inspect(f func(sheet string)) *mXlsxFileMockNewStreamWriter {
	if mmNewStreamWriter.mock.inspectFuncNewStreamWriter != nil {
		mmNewStreamWriter.mock.t.Fatalf("Inspect function is already set for XlsxFileMock.NewStreamWriter")
	}

	mmNewStreamWriter.mock.inspectFuncNewStreamWriter = f

	return mmNewStreamWriter
}

// Return sets up results that will be returned by xlsxFile.NewStreamWriter
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Return(sp1 *excelize.StreamWriter, err error) *XlsxFileMock {
	if mmNewStreamWriter.mock.funcNewStreamWriter != nil {
		mmNewStreamWriter.mock.t.Fatalf("XlsxFileMock.NewStreamWriter mock is already set by Set")
	}

	if mmNewStreamWriter.defaultExpectation == nil {
		mmNewStreamWriter.defaultExpectation = &XlsxFileMockNewStreamWriterExpectation{mock: mmNewStreamWriter.mock}
	}
	mmNewStreamWriter.defaultExpectation.results = &XlsxFileMockNewStreamWriterResults{sp1, err}
	return mmNewStreamWriter.mock
}

// Set uses given function f to mock the xlsxFile.NewStreamWriter method
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Set(f func(sheet string) (sp1 *excelize.StreamWriter, err error)) *XlsxFileMock {
	if mmNewStreamWriter.defaultExpectation != nil {
		mmNewStreamWriter.mock.t.Fatalf("Default expectation is already set for the xlsxFile.NewStreamWriter method")
	}

	if len(mmNewStreamWriter.expectations) > 0 {
		mmNewStreamWriter.mock.t.Fatalf("Some expectations are already set for the xlsxFile.NewStreamWriter method")
	}

	mmNewStreamWriter.mock.funcNewStreamWriter = f
	return mmNewStreamWriter.mock
}

// When sets expectation for the xlsxFile.NewStreamWriter which will trigger the result defined by the following
// Then helper
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) When(sheet string) *XlsxFileMockNewStreamWriterExpectation {
	if mmNewStreamWriter.mock.funcNewStreamWriter != nil {
		mmNewStreamWriter.mock.t.Fatalf("XlsxFileMock.NewStreamWriter mock is already set by Set")
	}

	expectation := &XlsxFileMockNewStreamWriterExpectation{
		mock:   mmNewStreamWriter.mock,
		params: &XlsxFileMockNewStreamWriterParams{sheet},
	}
	mmNewStreamWriter.expectations = append(mmNewStreamWriter.expectations, expectation)
	return expectation
}

// Then sets up xlsxFile.NewStreamWriter return parameters for the expectation previously defined by the When method
func (e *XlsxFileMockNewStreamWriterExpectation) Then(sp1 *excelize.StreamWriter, err error) *XlsxFileMock {
	e.results = &XlsxFileMockNewStreamWriterResults{sp1, err}
	return e.mock
}

// Times sets number of times xlsxFile.NewStreamWriter should be invoked
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Times(n uint64) *mXlsxFileMockNewStreamWriter {
	if n == 0 {
		mmNewStreamWriter.mock.t.Fatalf("Times of XlsxFileMock.NewStreamWriter mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNewStreamWriter.expectedInvocations, n)
	return mmNewStreamWriter
}

func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) invocationsDone() bool {
	if len(mmNewStreamWriter.expectations) == 0 && mmNewStreamWriter.defaultExpectation == nil && mmNewStreamWriter.mock.funcNewStreamWriter == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNewStreamWriter.mock.afterNewStreamWriterCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNewStreamWriter.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// NewStreamWriter implements xlsxFile
func (mmNewStreamWriter *XlsxFileMock) NewStreamWriter(sheet string) (sp1 *excelize.StreamWriter, err error) {
	mm_atomic.AddUint64(&mmNewStreamWriter.beforeNewStreamWriterCounter, 1)
	defer mm_atomic.AddUint64(&mmNewStreamWriter.afterNewStreamWriterCounter, 1)

	if mmNewStreamWriter.inspectFuncNewStreamWriter != nil {
		mmNewStreamWriter.inspectFuncNewStreamWriter(sheet)
	}

	mm_params := XlsxFileMockNewStreamWriterParams{sheet}

	// Record call args
	mmNewStreamWriter.NewStreamWriterMock.mutex.Lock()
	mmNewStreamWriter.NewStreamWriterMock.callArgs = append(mmNewStreamWriter.NewStreamWriterMock.callArgs, &mm_params)
	mmNewStreamWriter.NewStreamWriterMock.mutex.Unlock()

	for _, e := range mmNewStreamWriter.NewStreamWriterMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmNewStreamWriter.NewStreamWriterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNewStreamWriter.NewStreamWriterMock.defaultExpectation.Counter, 1)
		mm_want := mmNewStreamWriter.NewStreamWriterMock.defaultExpectation.params
		mm_want_ptrs := mmNewStreamWriter.NewStreamWriterMock.defaultExpectation.paramPtrs

		mm_got := XlsxFileMockNewStreamWriterParams{sheet}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.sheet != nil && !minimock.Equal(*mm_want_ptrs.sheet, mm_got.sheet) {
				mmNewStreamWriter.t.Errorf("XlsxFileMock.NewStreamWriter got unexpected parameter sheet, want: %#v, got: %#v%s\n", *mm_want_ptrs.sheet, mm_got.sheet, minimock.Diff(*mm_want_ptrs.sheet, mm_got.sheet))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNewStreamWriter.t.Errorf("XlsxFileMock.NewStreamWriter got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNewStreamWriter.NewStreamWriterMock.defaultExpectation.results
		if mm_results == nil {
			mmNewStreamWriter.t.Fatal("No results are set for the XlsxFileMock.NewStreamWriter")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmNewStreamWriter.funcNewStreamWriter != nil {
		return mmNewStreamWriter.funcNewStreamWriter(sheet)
	}
	mmNewStreamWriter.t.Fatalf("Unexpected call to XlsxFileMock.NewStreamWriter. %v", sheet)
	return
}

// NewStreamWriterAfterCounter returns a count of finished XlsxFileMock.NewStreamWriter invocations
func (mmNewStreamWriter *XlsxFileMock) NewStreamWriterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewStreamWriter.afterNewStreamWriterCounter)
}

// NewStreamWriterBeforeCounter returns a count of XlsxFileMock.NewStreamWriter invocations
func (mmNewStreamWriter *XlsxFileMock) NewStreamWriterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNewStreamWriter.beforeNewStreamWriterCounter)
}

// Calls returns a list of arguments used in each call to XlsxFileMock.NewStreamWriter.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNewStreamWriter *mXlsxFileMockNewStreamWriter) Calls() []*XlsxFileMockNewStreamWriterParams {
	mmNewStreamWriter.mutex.RLock()

	argCopy := make([]*XlsxFileMockNewStreamWriterParams, len(mmNewStreamWriter.callArgs))
	copy(argCopy, mmNewStreamWriter.callArgs)

	mmNewStreamWriter.mutex.RUnlock()

	return argCopy
}

// MinimockNewStreamWriterDone returns true if the count of the NewStreamWriter invocations corresponds
// the number of defined expectations
func (m *XlsxFileMock) MinimockNewStreamWriterDone() bool {
	if m.NewStreamWriterMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewStreamWriterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewStreamWriterMock.invocationsDone()
}

// MinimockNewStreamWriterInspect logs each unmet expectation
func (m *XlsxFileMock) MinimockNewStreamWriterInspect() {
	for _, e := range m.NewStreamWriterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to XlsxFileMock.NewStreamWriter with params: %#v", *e.params)
		}
	}

	afterNewStreamWriterCounter := mm_atomic.LoadUint64(&m.afterNewStreamWriterCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewStreamWriterMock.defaultExpectation != nil && afterNewStreamWriterCounter < 1 {
		if m.NewStreamWriterMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to XlsxFileMock.NewStreamWriter")
		} else {
			m.t.Errorf("Expected call to XlsxFileMock.NewStreamWriter with params: %#v", *m.NewStreamWriterMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNewStreamWriter != nil && afterNewStreamWriterCounter < 1 {
		m.t.Error("Expected call to XlsxFileMock.NewStreamWriter")
	}

	if !m.NewStreamWriterMock.invocationsDone() && afterNewStreamWriterCounter > 0 {
		m.t.Errorf("Expected %d calls to XlsxFileMock.NewStreamWriter but found %d calls",
			mm_atomic.LoadUint64(&m.NewStreamWriterMock.expectedInvocations), afterNewStreamWriterCounter)
	}
}

type mXlsxFileMockWrite struct {
	optional           bool
	mock               *XlsxFileMock
	defaultExpectation *XlsxFileMockWriteExpectation
	expectations       []*XlsxFileMockWriteExpectation

	callArgs []*XlsxFileMockWriteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// XlsxFileMockWriteExpectation specifies expectation struct of the xlsxFile.Write
type XlsxFileMockWriteExpectation struct {
	mock      *XlsxFileMock
	params    *XlsxFileMockWriteParams
	paramPtrs *XlsxFileMockWriteParamPtrs
	results   *XlsxFileMockWriteResults
	Counter   uint64
}

// XlsxFileMockWriteParams contains parameters of the xlsxFile.Write
type XlsxFileMockWriteParams struct {
	w    io.Writer
	opts []excelize.Options
}

// XlsxFileMockWriteParamPtrs contains pointers to parameters of the xlsxFile.Write
type XlsxFileMockWriteParamPtrs struct {
	w    *io.Writer
	opts *[]excelize.Options
}

// XlsxFileMockWriteResults contains results of the xlsxFile.Write
type XlsxFileMockWriteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWrite *mXlsxFileMockWrite) Optional() *mXlsxFileMockWrite {
	mmWrite.optional = true
	return mmWrite
}

// Expect sets up expected params for xlsxFile.Write
func (mmWrite *mXlsxFileMockWrite) Expect(w io.Writer, opts ...excelize.Options) *mXlsxFileMockWrite {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &XlsxFileMockWriteExpectation{}
	}

	if mmWrite.defaultExpectation.paramPtrs != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by ExpectParams functions")
	}

	mmWrite.defaultExpectation.params = &XlsxFileMockWriteParams{w, opts}
	for _, e := range mmWrite.expectations {
		if minimock.Equal(e.params, mmWrite.defaultExpectation.params) {
			mmWrite.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWrite.defaultExpectation.params)
		}
	}

	return mmWrite
}

// ExpectWParam1 sets up expected param w for xlsxFile.Write
func (mmWrite *mXlsxFileMockWrite) ExpectWParam1(w io.Writer) *mXlsxFileMockWrite {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &XlsxFileMockWriteExpectation{}
	}

	if mmWrite.defaultExpectation.params != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Expect")
	}

	if mmWrite.defaultExpectation.paramPtrs == nil {
		mmWrite.defaultExpectation.paramPtrs = &XlsxFileMockWriteParamPtrs{}
	}
	mmWrite.defaultExpectation.paramPtrs.w = &w

	return mmWrite
}

// ExpectOptsParam2 sets up expected param opts for xlsxFile.Write
func (mmWrite *mXlsxFileMockWrite) ExpectOptsParam2(opts ...excelize.Options) *mXlsxFileMockWrite {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &XlsxFileMockWriteExpectation{}
	}

	if mmWrite.defaultExpectation.params != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Expect")
	}

	if mmWrite.defaultExpectation.paramPtrs == nil {
		mmWrite.defaultExpectation.paramPtrs = &XlsxFileMockWriteParamPtrs{}
	}
	mmWrite.defaultExpectation.paramPtrs.opts = &opts

	return mmWrite
}

// Inspect accepts an inspector function that has same arguments as the xlsxFile.Write
func (mmWrite *mXlsxFileMockWrite) Inspect(f func(w io.Writer, opts ...excelize.Options)) *mXlsxFileMockWrite {
	if mmWrite.mock.inspectFuncWrite != nil {
		mmWrite.mock.t.Fatalf("Inspect function is already set for XlsxFileMock.Write")
	}

	mmWrite.mock.inspectFuncWrite = f

	return mmWrite
}

// Return sets up results that will be returned by xlsxFile.Write
func (mmWrite *mXlsxFileMockWrite) Return(err error) *XlsxFileMock {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &XlsxFileMockWriteExpectation{mock: mmWrite.mock}
	}
	mmWrite.defaultExpectation.results = &XlsxFileMockWriteResults{err}
	return mmWrite.mock
}

// Set uses given function f to mock the xlsxFile.Write method
func (mmWrite *mXlsxFileMockWrite) Set(f func(w io.Writer, opts ...excelize.Options) (err error)) *XlsxFileMock {
	if mmWrite.defaultExpectation != nil {
		mmWrite.mock.t.Fatalf("Default expectation is already set for the xlsxFile.Write method")
	}

	if len(mmWrite.expectations) > 0 {
		mmWrite.mock.t.Fatalf("Some expectations are already set for the xlsxFile.Write method")
	}

	mmWrite.mock.funcWrite = f
	return mmWrite.mock
}

// When sets expectation for the xlsxFile.Write which will trigger the result defined by the following
// Then helper
func (mmWrite *mXlsxFileMockWrite) When(w io.Writer, opts ...excelize.Options) *XlsxFileMockWriteExpectation {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("XlsxFileMock.Write mock is already set by Set")
	}

	expectation := &XlsxFileMockWriteExpectation{
		mock:   mmWrite.mock,
		params: &XlsxFileMockWriteParams{w, opts},
	}
	mmWrite.expectations = append(mmWrite.expectations, expectation)
	return expectation
}

// Then sets up xlsxFile.Write return parameters for the expectation previously defined by the When method
func (e *XlsxFileMockWriteExpectation) Then(err error) *XlsxFileMock {
	e.results = &XlsxFileMockWriteResults{err}
	return e.mock
}

// Times sets number of times xlsxFile.Write should be invoked
func (mmWrite *mXlsxFileMockWrite) Times(n uint64) *mXlsxFileMockWrite {
	if n == 0 {
		mmWrite.mock.t.Fatalf("Times of XlsxFileMock.Write mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWrite.expectedInvocations, n)
	return mmWrite
}

func (mmWrite *mXlsxFileMockWrite) invocationsDone() bool {
	if len(mmWrite.expectations) == 0 && mmWrite.defaultExpectation == nil && mmWrite.mock.funcWrite == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWrite.mock.afterWriteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWrite.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Write implements xlsxFile
func (mmWrite *XlsxFileMock) Write(w io.Writer, opts ...excelize.Options) (err error) {
	mm_atomic.AddUint64(&mmWrite.beforeWriteCounter, 1)
	defer mm_atomic.AddUint64(&mmWrite.afterWriteCounter, 1)

	if mmWrite.inspectFuncWrite != nil {
		mmWrite.inspectFuncWrite(w, opts...)
	}

	mm_params := XlsxFileMockWriteParams{w, opts}

	// Record call args
	mmWrite.WriteMock.mutex.Lock()
	mmWrite.WriteMock.callArgs = append(mmWrite.WriteMock.callArgs, &mm_params)
	mmWrite.WriteMock.mutex.Unlock()

	for _, e := range mmWrite.WriteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWrite.WriteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWrite.WriteMock.defaultExpectation.Counter, 1)
		mm_want := mmWrite.WriteMock.defaultExpectation.params
		mm_want_ptrs := mmWrite.WriteMock.defaultExpectation.paramPtrs

		mm_got := XlsxFileMockWriteParams{w, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.w != nil && !minimock.Equal(*mm_want_ptrs.w, mm_got.w) {
				mmWrite.t.Errorf("XlsxFileMock.Write got unexpected parameter w, want: %#v, got: %#v%s\n", *mm_want_ptrs.w, mm_got.w, minimock.Diff(*mm_want_ptrs.w, mm_got.w))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmWrite.t.Errorf("XlsxFileMock.Write got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWrite.t.Errorf("XlsxFileMock.Write got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWrite.WriteMock.defaultExpectation.results
		if mm_results == nil {
			mmWrite.t.Fatal("No results are set for the XlsxFileMock.Write")
		}
		return (*mm_results).err
	}
	if mmWrite.funcWrite != nil {
		return mmWrite.funcWrite(w, opts...)
	}
	mmWrite.t.Fatalf("Unexpected call to XlsxFileMock.Write. %v %v", w, opts)
	return
}

// WriteAfterCounter returns a count of finished XlsxFileMock.Write invocations
func (mmWrite *XlsxFileMock) WriteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWrite.afterWriteCounter)
}

// WriteBeforeCounter returns a count of XlsxFileMock.Write invocations
func (mmWrite *XlsxFileMock) WriteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWrite.beforeWriteCounter)
}

// Calls returns a list of arguments used in each call to XlsxFileMock.Write.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWrite *mXlsxFileMockWrite) Calls() []*XlsxFileMockWriteParams {
	mmWrite.mutex.RLock()

	argCopy := make([]*XlsxFileMockWriteParams, len(mmWrite.callArgs))
	copy(argCopy, mmWrite.callArgs)

	mmWrite.mutex.RUnlock()

	return argCopy
}

// MinimockWriteDone returns true if the count of the Write invocations corresponds
// the number of defined expectations
func (m *XlsxFileMock) MinimockWriteDone() bool {
	if m.WriteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WriteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WriteMock.invocationsDone()
}

// MinimockWriteInspect logs each unmet expectation
func (m *XlsxFileMock) MinimockWriteInspect() {
	for _, e := range m.WriteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to XlsxFileMock.Write with params: %#v", *e.params)
		}
	}

	afterWriteCounter := mm_atomic.LoadUint64(&m.afterWriteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WriteMock.defaultExpectation != nil && afterWriteCounter < 1 {
		if m.WriteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to XlsxFileMock.Write")
		} else {
			m.t.Errorf("Expected call to XlsxFileMock.Write with params: %#v", *m.WriteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWrite != nil && afterWriteCounter < 1 {
		m.t.Error("Expected call to XlsxFileMock.Write")
	}

	if !m.WriteMock.invocationsDone() && afterWriteCounter > 0 {
		m.t.Errorf("Expected %d calls to XlsxFileMock.Write but found %d calls",
			mm_atomic.LoadUint64(&m.WriteMock.expectedInvocations), afterWriteCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *XlsxFileMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseInspect()

			m.MinimockNewStreamWriterInspect()

			m.MinimockWriteInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *XlsxFileMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *XlsxFileMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockNewStreamWriterDone() &&
		m.MinimockWriteDone()
}
